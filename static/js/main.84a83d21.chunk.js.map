{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","responseGoogle","response","console","log","profileObj","state","login","bind","handleChange","myRef","React","createRef","e","this","setState","target","name","value","current","email","password","className","type","placeholder","ref","onChange","onClick","clientId","buttonText","onSuccess","onFailure","cookiePolicy","href","fetch","method","body","JSON","stringify","then","resp","json","result","warn","data","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kRAmEeA,EA9Df,kDAEE,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAiBRC,eAAiB,SAACC,GAChBC,QAAQC,IAAIF,GACZC,QAAQC,IAAIF,EAASG,aAlBrB,EAAKC,MAAQ,CAAC,MAAQ,GAAI,SAAW,IACrC,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,gBACb,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,MAAQC,IAAMC,YALF,EAFrB,gDAUE,SAAaC,GACXC,KAAKC,SAAL,eAAgBF,EAAEG,OAAOC,KAAMJ,EAAEG,OAAOE,QACxCf,QAAQC,IAAI,QAASU,KAAKJ,MAAMS,QAAQD,SAZ5C,mBAeE,WACEf,QAAQC,IAAI,QAAQU,KAAKR,MAAMc,OAC/BjB,QAAQC,IAAI,WAAYU,KAAKR,MAAMe,YAjBvC,oBAwBE,WACE,OACE,sBAAKC,UAAU,aAAf,UACE,mDACA,uBACA,oCAAM,uBAAOC,KAAK,OAAON,KAAK,QAAQO,YAAY,QAAQF,UAAU,YAAYG,IAAKX,KAAKJ,MAAOgB,SAAUZ,KAAKL,eAAhH,OACA,oCAAM,uBAAOc,KAAK,WAAWN,KAAK,WAAWO,YAAY,WAAWC,IAAKX,KAAKJ,MAAOY,UAAU,YAAYI,SAAUZ,KAAKL,eAA1H,OACA,8BACE,wBAAQc,KAAK,SAASD,UAAU,aAAaK,QAASb,KAAKP,MAA3D,qBAEF,qBAAKe,UAAU,QAAf,gBACA,8BACE,cAAC,IAAD,CACEM,SAAS,2EACTC,WAAW,sBACXC,UAAWhB,KAAKb,eAChB8B,UAAWjB,KAAKb,eAChB+B,aAAc,yBAGlB,sBAAKV,UAAU,QAAf,mBAA6B,mBAAGW,KAAK,IAAR,kBAA7B,qCA5CR,+BAiDE,WACEC,MAAM,8BAA8B,CAClCC,OAAO,MACPC,KAAKC,KAAKC,UAAUxB,KAAKR,SAEzBiC,MAAK,SAACC,GACNA,EAAKC,OAAOF,MAAK,SAACG,GAChBvC,QAAQwC,KAAKD,EAAOE,gBAxD5B,GAAyBjC,IAAMkC,WCOhBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.84a83d21.chunk.js","sourcesContent":["import React from 'react';\nimport GoogleLogin from 'react-google-login';\nimport './App.css';\nimport { Button } from 'react-bootstrap';\n\nexport class App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {'email':'', 'password':''};\n    this.login = this.login.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.myRef = React.createRef();\n  }\n\n  handleChange(e) {\n    this.setState({[e.target.name]:e.target.value});\n    console.log(\"value\", this.myRef.current.value);\n  }\n\n  login() {\n    console.log('email',this.state.email);\n    console.log('password', this.state.password);\n  }\n\n  responseGoogle = (response) => {\n    console.log(response);\n    console.log(response.profileObj);\n  }\n  render() {\n    return (\n      <div className=\"App-header\">\n        <div>Test Application</div>\n        <br/>\n        <div> <input type=\"text\" name=\"email\" placeholder=\"Email\" className=\"input_box\" ref={this.myRef} onChange={this.handleChange}/> </div>\n        <div> <input type=\"password\" name=\"password\" placeholder=\"Password\" ref={this.myRef} className=\"input_box\" onChange={this.handleChange} /> </div>\n        <div>\n          <button type=\"button\" className=\"submit_btn\" onClick={this.login}>Login</button> \n        </div>\n        <div className=\"label\">or</div>\n        <div>\n          <GoogleLogin\n            clientId=\"949894065632-je92cejsr4kab7oi85gfn0f5cs13rham.apps.googleusercontent.com\"\n            buttonText=\"Sign up with google\"\n            onSuccess={this.responseGoogle}\n            onFailure={this.responseGoogle}\n            cookiePolicy={'single_host_origin'}\n          />\n        </div>\n        <div className=\"label\">click <a href=\"#\">here</a> if you don't have account</div>\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    fetch('https://reqres.in/api/users',{\n      method:\"GET\",\n      body:JSON.stringify(this.state)\n    }\n    ).then((resp)=>{\n      resp.json().then((result) => {\n        console.warn(result.data);\n      })\n    })\n  }\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}